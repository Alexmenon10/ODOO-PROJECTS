from odoo import models, fields, api, _
import xlwt
from io import BytesIO
import base64
import itertools
from operator import itemgetter
from odoo.exceptions import Warning
from odoo import tools
from xlwt import easyxf
import datetime
from odoo.exceptions import UserError
from datetime import datetime
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from odoo.exceptions import Warning, ValidationError, UserError
import pdb

cell = easyxf('pattern: pattern solid, fore_colour yellow')
ADDONS_PATH = tools.config['addons_path'].split(",")[-1]

MONTH_LIST = [('1', 'Jan'), ('2', 'Feb'), ('3', 'Mar'),
              ('4', 'Apr'), ('5', 'May'), ('6', 'Jun'),
              ('7', 'Jul'), ('8', 'Aug'), ('9', 'Sep'),
              ('10', 'Oct'), ('11', 'Nov'), ('12', 'Dec')]


class PurchaseBillSummaryExcelReport(models.TransientModel):
    _name = 'purchase.bill.excel.report.wizard'
    _description = ' Purchase Bill Summary Excel Report'

    start_date = fields.Date('Start date')
    end_date = fields.Date('End date')
    attachment = fields.Binary('File')
    attach_name = fields.Char('Attachment Name')
    summary_file = fields.Binary('Purchase Bill Summary Report')
    file_name = fields.Char('File Name')
    report_printed = fields.Boolean('Purchase Bill Summary Report')
    current_time = fields.Date('Current Time', default=lambda self: fields.Datetime.now())
    ams_time = datetime.now() + timedelta(hours=5, minutes=30)
    date = ams_time.strftime('%d-%m-%Y %H:%M:%S')
    user_id = fields.Many2one('res.users', 'User', default=lambda self: self.env.user)


    def action_get_purchase_bill_excel_report(self):
        workbook = xlwt.Workbook()
        worksheet1 = workbook.add_sheet('PURCAHSE BILL SUMMARY REPORT')
        design_6 = easyxf('align: horiz left;font: bold 1;')
        design_7 = easyxf('align: horiz center;font: bold 1;')
        design_8 = easyxf('align: horiz left;')
        design_9 = easyxf('align: horiz right;')
        design_10 = easyxf('align: horiz right; pattern: pattern solid, fore_colour red;')
        design_11 = easyxf('align: horiz right; pattern: pattern solid, fore_colour green;')
        design_12 = easyxf('align: horiz right; pattern: pattern solid, fore_colour gray25;')
        design_13 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_14 = easyxf('align: horiz left;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_15 = easyxf('align: horiz right;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_16 = easyxf('align: horiz center;font: bold 1;pattern: pattern solid, fore_colour gray25;')
        design_17 = easyxf("pattern: pattern solid, fore_color black; font: color white; align: horiz center")
        design_18 = easyxf('align: horiz right; font: bold 1;')

        worksheet1.col(0).width = 2000
        worksheet1.col(1).width = 3500
        worksheet1.col(2).width = 7000
        worksheet1.col(3).width = 8000
        worksheet1.col(4).width = 6000
        worksheet1.col(5).width = 2800
        worksheet1.col(6).width = 2800
        worksheet1.col(7).width = 3000
        worksheet1.col(8).width = 5000
        worksheet1.col(9).width = 6000


        rows = 0
        cols = 0
        row_pq = 5
        col_pq = 5

        worksheet1.set_panes_frozen(True)
        worksheet1.set_horz_split_pos(rows + 1)



        col_1 = 0
        worksheet1.write_merge(rows, rows, 2, 3, 'PURCHASE BILL SUMMARY  REPORT', design_16)
        rows += 1
        worksheet1.write(rows, 2, 'START DATE', design_14)
        worksheet1.write(rows, 3, self.start_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'END DATE', design_14)
        worksheet1.write(rows, 3, self.end_date.strftime('%d-%m-%Y'), design_13)
        rows += 1
        worksheet1.write(rows, 2, 'REPORT GENERATED BY', design_14)
        worksheet1.write(rows, 3, self.user_id.name, design_13)
        rows += 2
        worksheet1.write(rows, col_1, _('S.NO'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('BILL DATE'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('BILL No'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('Product Category'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _(' Product Description'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('QTY'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('UOM'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('RATE'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('TOTAL AMOUNT'), design_13)
        col_1 += 1
        worksheet1.write(rows, col_1, _('Status'), design_13)
        col_1 += 1
        sl_no = 1
        row_pq = row_pq + 1
        mr_num = []
        res = []
        total = 0
        for record in self:
            domain = [
                ('invoice_date', '>=', record.start_date),
                ('invoice_date', '<=', record.end_date),
                ('state', 'not in', ('draft', 'cancel'))
            ]
            if record.start_date and record.end_date:
                purchase_bill_summary = record.env['account.move'].sudo().search(domain, order='invoice_date asc')
                for po in purchase_bill_summary.invoice_line_ids:
                    worksheet1.write(row_pq, 0, sl_no, design_7)
                    if po.move_id.invoice_date:
                        worksheet1.write(row_pq, 1, po.move_id.invoice_date.strftime('%d-%m-%Y'), design_8)
                    else:
                        worksheet1.write(row_pq, 1, '-', design_7)
                    if po.move_id.name:
                        worksheet1.write(row_pq, 2, po.move_id.name, design_8)
                    else:
                        worksheet1.write(row_pq, 2, '-', design_7)
                    if po.product_id.categ_id:
                        worksheet1.write(row_pq, 3, po.product_id.categ_id.name, design_8)
                    else:
                        worksheet1.write(row_pq, 3, '-', design_7)
                    if po.name:
                        worksheet1.write(row_pq, 4, po.name, design_8)
                    else:
                        worksheet1.write(row_pq, 4, '-', design_7)
                    if po.quantity:
                        worksheet1.write(row_pq, 5, po.quantity, design_9)
                    else:
                        worksheet1.write(row_pq, 5, '-', design_9)
                    if po.product_id.uom_po_id:
                        worksheet1.write(row_pq, 6, po.product_id.uom_po_id.name, design_8)
                    else:
                        worksheet1.write(row_pq, 6, '-', design_7)
                    if po.price_unit:
                        worksheet1.write(row_pq, 7, po.price_unit, design_9)
                    else:
                        worksheet1.write(row_pq, 7, '-', design_9)
                    if po.price_subtotal:
                        total += po.price_subtotal
                        worksheet1.write(row_pq, 8,
                                         po.move_id.company_id.currency_id.symbol + str(po.price_subtotal)
                                         , design_9)
                    else:
                        worksheet1.write(row_pq, 8, '-', design_9)
                    if po.move_id.state:
                        state = ''
                        if po.move_id.state == 'validate':
                            state = 'Validated'
                        elif po.move_id.state == 'posted':
                            state = 'Posted'
                        po_summary_state = state
                        worksheet1.write(row_pq, 9, po_summary_state, design_8)
                    else:
                        worksheet1.write(row_pq, 9, '-', design_7)

                    sl_no += 1
                    row_pq += 1
                worksheet1.write(row_pq, 7, 'Total Value', design_7)
                worksheet1.write(row_pq, 8, po.move_id.company_id.currency_id.symbol + str('%.2f' %total), design_18)
        fp = BytesIO()
        o = workbook.save(fp)
        fp.read()
        excel_file = base64.b64encode(fp.getvalue())
        self.write({'summary_file': excel_file, 'file_name': 'Purchase Bill Summary Report -[ %s ] [ %s ].xls' % (
            self.start_date.strftime('%d-%m-%Y'), record.end_date.strftime('%d-%m-%Y')),
                    'report_printed': True})
        fp.close()
        return {
            'view_mode': 'form',
            'res_id': self.id,
            'res_model': 'purchase.bill.excel.report.wizard',
            'view_type': 'form',
            'type': 'ir.actions.act_window',
            'context': self.env.context,
            'target': 'new',
        }
